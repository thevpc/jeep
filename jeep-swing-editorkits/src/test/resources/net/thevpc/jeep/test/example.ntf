#!include</net/thevpc/nuts/runtime/includes/standard-header.ntf>

```sh nuts``` stands for ##Network Updatable Things Services## tool. It is a ##:_:Package Manager## for (mainly) ##:_:Java™##
and non ##:_:Java™## world. It helps discovering, downloading, assembling and executing  remote artifacts
(packages) in a very handy way.
Each managed artifact  is also called a ```sh nuts``` which  is a ##Network Updatable Thing Service##.
```sh nuts``` artifacts are  stored  into repositories. A  ##:_:repository##  may be local for  storing local ```sh nuts```
or remote for accessing  remote artifacts (good examples  are  remote maven  repositories). It may
also be a proxy ##:_:repository## so that remote artifacts are fetched and cached locally to save network
resources.
One manages a set of repositories called a  ##:_:workspace##. Managed ```sh nuts```  (artifacts)  have descriptors
that depict dependencies between them. This dependency is seamlessly handled by  ```sh nuts```  (tool) to
resolve and download on-need dependencies over the wire.

```sh nuts``` is a swiss army knife tool as it acts like (and supports) maven ##:_:build tool## to have an abstract
view of the the  artifacts ##:_:dependency## and like  zypper/apt-get/pip/npm  ##:_:package manager tools##
to ##:_:install## and ##:_:uninstall## artifacts allowing multiple versions of the very same artifact to  be installed.

Although ```sh nuts``` focuses on ##:_:Java™## artifacts, it still supports, by design, native and all non ##:_:Java™## artifacts.
Dependencies are fetched according to the current operating system type, distribution and hardware
architectures.

```sh nuts``` works either as ##:_:standalone application## or as ##:_:Java™ library## to enable dynamic and dependency
aware class loading and brings a rich toolset to provide a versatile portable command line tools such
as ###nsh### (a bash like shell), ###tomcat###, ###derby### ... wrapper tools to make it easier providing
##:_:development## , ##:_:test## and ##:_:deployment## reproducible environments.

With container concepts in mind, ```sh nuts``` is the perfect ##:_:Java™## application tool for Docker, CoreOs
and other ##:_:container engines##.

##) COMMON VERBS:
install,uninstall,update : install/uninstall/update an artifact (using its fetched/deployed installer)
deploy, undeploy         : manage artifacts on the local repositories
fetch,push               : download, upload to remote repositories
search                   : search for existing/installable artifacts
exec                     : execute an artifact (tool)

##) SYNOPSIS:
```sh
nuts [<-options>]... <command> <args> ...
```

##) VERSIONS:
Boot API     Version: ###${nuts.workspace-boot.version}###
Boot Runtime Version: ###${nuts.workspace-runtime.version}###
##:_:Java™##        Version: ###${java.version} (${java.vm.name})###

##) NUTS OPTIONS:
 There are four (4) types of options :
 * ##:_:create options##
 * ##:_:create exported options##
 * ##:_:open options##
 * ##:_:open exported options##

 ##:_:create exported options## are considered both when creating a new workspace and when running it. If they are specified in creation
                    they will be persisted. If they are specified later they will override persisted values without persisting the changes

 ##:_:create options## are considered solely when creating a new workspace. They will be persisted then (to the configuration file)
                    but they will be ignored elsewhere if the workspace already exists : configured parameters will be in use.

 ##:_:open exported options## are open (so transient, non persistent) options that will override any configured value (if any)
                      having the ability to be exported to any ##:_:Java™## child process (as system property ```sh -D```...)

 ##:_:open options## are transient (non persistent) options that will override any configured value (if any) and will be
                     in use in the current process (and ignored elsewhere). Such options will be considered in creating workspaces
                     as well but still they are not persistent.


###) NUTS CREATE EXPORTED OPTIONS:
 ```sh --workspace <workspace-location> ```
 ```sh -w <workspace-location> ```
      workspace location to open (or create).
      this defaults to default-workspace. Typically this refers to ~/.config/nuts/default-workspace on *NIX Platforms*
      (when ```sh --system-config-home``` is not specified). workspace location contains mainly config information.

 ```sh --user      <username> ```
 ```sh -u          <username> ```
      workspace username
      if not specified, all access to ```sh nuts``` will be with anonymous identity. so to promote user privileges, one may
      specify user credentials (see ```sh --password ```)

 ```sh --password  <password> ```
 ```sh -p  <password> ```
      workspace password
      They must be provided when ```sh --user``` is present.

 ```sh -V <boot-api-version> ```
 ```sh --boot-version <boot-api-version> ```
 ```sh --boot-api-version <boot-api-version> ```
      run a new/different instance of ```sh nuts``` with the specified version

 ```sh --boot-runtime <runtime-id-or-version> ```
      load runtime (nuts-runtime) version. either version may be expressed or full nuts implementation
      (other than nuts-runtime) should be defined

 ```sh --java      <java-command> ```
 ```sh --boot-java <java-command> ```
 ```sh -j <java-command> ```
      ##:_:Java™## command to run new instance of ```sh nuts```

 ```sh --java-home      <java-home> ```
 ```sh --boot-java-home <java-home> ```
 ```sh -J <java-home> ```
      ##:_:Java™## home to run new instance of ```sh nuts```. When ##:_:Java™## command is present, this will be ignored.

 ```sh --java-options      <java-options> ```
 ```sh --boot-java-options  <java-options> ```
 ```sh -J <java-options> ```
      ##:_:Java™## options to run new instance of nuts

###) NUTS CREATE OPTIONS:

 ```sh --archetype <archetype-name>```
 ```sh -A <archetype-name>```
      workspace archetype to create (if workspace not found).
      when opening a non existing workspace, ```sh nuts``` will create it
      using the default archetype. Supported archetypes are :
          ```kw default``` : should handle most cases. Will create 6 repositories
                    ```kw local```            : containing local ```sh nuts``` (java and non java ```sh nuts```).
                    ```kw maven-local```      : referencing "~/.m2/repository" local maven repository.
                    ```kw maven-central```    : referencing "https://repo.maven.apache.org/maven2/" (with cache support).
                    ```kw vpc-public-maven``` : referencing "https://.../vpc-public-maven/master" author's github maven repo (cached).
                    ```kw vpc-public-nuts```  : referencing "https://.../vpc-public-nuts/master"  author's github ```sh nuts```  repo (cached).
                    ```kw system```           : referencing global (root, system wide) repository if available.
          ```kw minimal``` : will create an almost empty workspace with a single ```sh nuts``` local repository and no users.
                        You should use it in conjunction with ```sh --boot-repos``` options to enable a valid location from
                        which nuts would be downloaded as well.
          ```kw server```  : will create an almost empty workspace with a single ```sh nuts``` local repository
                        and a couple of users ##:_:guest## (read support) and ##:_:contributor## (write support).
                        You should use it in conjunction with ```sh --boot-repos``` options to enable a valid location from
                                                which nuts would be downloaded as well.

 ```sh --store-strategy <store-strategy>```
      Define store strategy used for persisting configuration and data of the workspace.
      Valid values of <store-strategy> are ```kw exploded```, ```kw standalone```.
      ```kw exploded```   : use distinct folders for temp, var, lib, config ... folders (this is the default)
      ```kw standalone``` : use a self contained folder for all types of data of the workspace. This is interesting for sharing
                   workspaces across multiple machines.

 ```sh -S```
 ```sh --standalone```
       will boot with standalone strategy so that all files will be stored in the workspace folder
       overriding workspace config. same as  ```sh --store-strategy``` ```kw standalone```

 ```sh --exploded-workspace```
       will boot with exploded strategy so that all file will be stored distinct folders (cache, and log)
       particularly will be stored elsewhere depending on on configuration.
       same as  ```sh --store-strategy``` ```kw exploded```

 ```sh --repo-store-strategy <store-strategy>```
      Defines store strategy used for persisting config and data of the repositories.
      Valid values of <store-strategy> are ```kw exploded```, ```kw standalone```.
      ```kw exploded```   : use distinct folders for temp, var, lib, config ... folders (this is the default)
      ```kw standalone``` : use a self contained folder for all types of data of the repository (under repository's main folder).
                   This is interesting for sharing
                   workspaces across multiple machines.

 ```sh --standalone-repositories```
       for newly created repos, will boot with standalone strategy so that all file will be stored in the repository's folder
       overriding workspace config. same as  ```sh --repo-store-strategy standalone```

 ```sh --exploded-repositories```
       for newly created repos, boot with exploded strategy so that all file will be stored distinct folders (cache, and log)
       particularly will be stored elsewhere depending on on configuration.
       same as  ```sh --repo-store-strategy exploded``` (this is default)

 ```sh --standalone```
    Equivalent of ```sh --standalone-workspace```

 ```sh --exploded```
    Equivalent of ```sh --exploded-workspace```

 ```sh --store-layout <store-layout>```
      Defines store layout relatively to the running operating system. This resolves root locations of data folders.
      That is to say that all 'config' folders for instance will be located at the location defined by the layout.

      Valid values of <store-layout> are ```kw system```, ```kw windows```, ```kw linux```, ```kw macos``` and ```kw unix```
      ```kw system```     : resolve the running operating system (windows, linux, ...) and select appropriate folder
      ```kw windows```    : always use windows layout (even if running on iOS)
      ```kw linux```      : always use linux layout (even if running on windows)
      ```kw unix```       : always use linux/unix layout (even if running on windows)
      ```kw macos```      : always use macos layout (even if running on windows)

      Data folders of nuts are :
        apps     : executable binaries folder
        lib      : non executable binaries (libraries) folder
        config   : configuration/settings files folder
        var      : data files folder
        log      : log/trace files folder
        temp     : temporary files folder
        cache    : cache folder

     In the Windows layout, default (home) locations resolve to ($HOME is the user's home folder)
        apps     : ```sh "$HOME/AppData/Roaming/nuts/apps"```
        lib      : ```sh "$HOME/AppData/Roaming/nuts/lib"```
        config   : ```sh "$HOME/AppData/Roaming/nuts/config"```
        var      : ```sh "$HOME/AppData/Roaming/nuts/var"```
        log      : ```sh "$HOME/AppData/Roaming/nuts/log"```
        temp     : ```sh "$HOME/AppData/Local/nuts/temp"```
        cache    : ```sh "$HOME/AppData/Local/nuts/cache"```
        run      : ```sh "$HOME/AppData/Local/nuts/run"```

     In the Linux/Unix/MacOS layout, default locations resolve (according to XDG Base Directory Specification)
     to ($HOME is the user's home folder)
        config   : ```sh "$HOME/.config/nuts"```
        apps     : ```sh "$HOME/.local/share/nuts/apps"```
        lib      : ```sh "$HOME/.local/share/nuts/lib"```
        var      : ```sh "$HOME/.local/share/nuts/var"```
        log      : ```sh "$HOME/.local/log/nuts"```
        cache    : ```sh "$HOME/.cache/nuts"```
        temp     : ```sh "$java.io.tmpdir/$username/nuts"```
        run      : ```sh "/run/user/$USER_ID/nuts"```

    These home locations are tuned individually using the following options
            ```sh --system-apps-home <path>```
            ```sh --system-lib-home <path>```
            ```sh --system-config-home <path>```
            ```sh --system-var-home <path>```
            ```sh --system-log-home <path>```
            ```sh --system-temp-home <path>```
            ```sh --system-cache-home <path>```

            ```sh --<os-family>-apps-home <path>```
            ```sh --<os-family>-lib-home <path>```
            ```sh --<os-family>-config-home <path>```
            ```sh --<os-family>-var-home <path>```
            ```sh --<os-family>-log-home <path>```
            ```sh --<os-family>-temp-home <path>```
            ```sh --<os-family>-cache-home <path>```

            where <os-family> in one of ```kw windows```, ```kw linux```, ```kw unix```, ```kw macos``` or ```kw system```.
            This helps moving workspace folder from/to distinct os families while providing a centralized configuration.
            when using ```kw system``` OS family, the effective OS family will be detected at runtime.

 ```sh --system-layout``` or --system```
       will use current system layout to resolve folder candidates for log,config,apps ...etc.
       same as  ```sh --store-layout``` <store-layout> system```

 ```sh --windows-layout```
       will use windows layout to resolve folder candidates for log,config,apps ...etc.
       same as  ```sh --store-layout <store-layout> windows```

 ```sh --linux-layout```
       will use linux/unix layout to resolve folder candidates for log,config,apps ...etc.
       same as  ```sh --store-layout <store-layout> linux```

 More tuning of these folders may be done by defining the folders location directly
 instead of the folder's home locations using the following options :
            ```sh --apps-location <path>```
            ```sh --lib-location <path>```
            ```sh --config-location <path>```
            ```sh --var-location <path>```
            ```sh --log-location <path>```
            ```sh --temp-location <path>```
            ```sh --cache-location <path>```

 ```sh --skip-companions or -k ```
       skip installing companion tools.

###) NUTS OPEN EXPORTED OPTIONS:
 ```sh --global  or -g```
      use root/system wide workspace instead of user's own workspace.
      requires admin privileges.
      shared/system workspace is located at :
      Windows    : ```sh "$ProgramFiles/nuts/default-workspace" ```
      Linux/Unix : ```sh "/usr/share/nuts/default-workspace" ```
      More generally folder homes are defines as follows :
      Windows Layout   :
        apps     : ```sh "$ProgramFiles/nuts" ```
        lib      : ```sh "$ProgramFiles/nuts" ```
        config   : ```sh "$ProgramFiles/nuts" ```
        var      : ```sh "$ProgramFiles/nuts" ```
        log      : ```sh "$ProgramFiles/nuts" ```
        temp     : ```sh "$TMP/nuts" ```
        cache    : ```sh "$ProgramFiles/nuts" ```
      Linux Layout    :
        apps     : ```sh "/opt/nuts/apps" ```
        lib      : ```sh "/opt/nuts/lib" ```
        config   : ```sh "/etc/opt/nuts" ```
        var      : ```sh "/var/opt/nuts" ```
        log      : ```sh "/var/log/nuts" ```
        temp     : ```sh "/tmp/nuts/global" ```
        cache    : ```sh "/var/cache/nuts" ```

 ```sh --color or -c```

    ```sh --color=always|yes|true|y|formatted```
      enables formatted (colorful) terminal (```kw formatted``` terminal)
    ```sh --color=inherited|h```
      use parent process terminal mode
    ```sh --color=auto|system|s```
      auto detected terminal (default)
    ```sh --color=never|none|no|false|n```
      equivalent to ```sh --no-color```
    ``` warning2 Attention``` : ```sh --color``` argument, should it accept a value, it must be an immediate one (with '=')
 ```sh -C```
 ```sh --no-color```
      disable formatted (colorful) terminal (```kw filtered``` terminal).

 ```sh --trace```
 ```sh -t```
      apply trace mode which allows a more verbose output

 ```sh --transitive```
      consider transitive repositories

 ```sh --index```
      search into indexes

 ```sh --cached```
      use cache whenever possible

 ```sh --progress[=<options>]```
 ```sh -P[=<options>]```
      configure progress monitor. valid values include ```kw no```|```kw false```|```kw n```|```kw newline```

 ```sh --plain[=<format-options>]```
      define plain text format as default output format (this is default)

 ```sh -T[=<format-type>[:<format-options>]]```
 ```sh --output-format[=<format-options>[:<format-options>]]```
      define format as default output format. ```sh --output-format=json``` is equivalent to ```sh --json```
      beside one  specify some extra options for the format, such as ```sh --output-format=json:lenient```

 ```sh --json[=<format-options>]```
      define json format as default output format

 ```sh --table[=<format-options>]```
      define table format as default output format

 ```sh --tree[=<format-options>]```
      define tree format as default output format

 ```sh --xml[=<format-options>]```
      define xml format as default output format

 ```sh --props[=<format-options>]```
      define props format as default output format

 ```sh --output-format-option=<format-options>```
 | ```sh -T=<format-options>```
                  : add specific format option
 ```sh --read-only or -R```
      read only mode. All changes to the workspace - if ever - are not persisted.

 ```sh --verbose , --log-verbose  , --log-finest  , --log-info , --log-fine ,
 --log-finer , --log-severe , --log-warning , --log-config ,
 --log-off , --log-off ```
      apply logging level to both terminal and file

 ```sh --log-term-verbose  , --log-term-finest  , --log-term-info , --log-term-fine ,
 --log-term-finer , --log-term-severe , --log-term-warning , --log-term-config ,
 --log-term-off , --log-term-off```
      apply logging level to terminal

 ```sh --log-file-verbose  , --log-file-finest  , --log-file-info , --log-file-fine ,
 --log-file-finer , --log-file-severe , --log-file-warning , --log-file-config ,
 --log-file-off , --log-file-off```
      apply logging level to terminal

 ```sh --log-file-size       <size>```
      define the maximum number of bytes to write to any one file. size is either expressed in bytes or suffixed with unit.
      supported units are :
        ```kw k``` or ```kw kb``` : for kilo-bytes (example 10k)
        ```kw m``` or ```kw mb``` : for mega-bytes (example 10m)
        ```kw g``` or ```kw gb``` : for giga-bytes (example 10g)

 ```sh --log-file-base     <log-folder-path>```
      define log file folder path

 ```sh --log-file-name       <log-file-name-pattern>```
      define log file name pattern. this defaults to "nuts-%g.log"

 ```sh --log-file-count      <number>```
      define the number of files to use (in rotating log)

 ```sh --log-inherited```
      calls rootLogger.setUseParentHandlers(true) to inherit log handlers.

 ```sh --exclude-extension     <extension-id-list>```
      exclude extensions from being loaded at runtime. list is separated with characters " ,;"

 ```sh --exclude-repository   <repository-list>```
      exclude repositories from being loaded at runtime. list is separated with characters " ,;"

 ```sh --repository   <repository-path>```
 ```sh --repositories <repository-path>```
 ```sh --repos        <repository-path>```
      register one or multiple (comma ',' separated) temporary repositories at the given path
      repositories follow the following pattern
      [+-=]?(<name>=)?<path>
      the prefix operator (+,-,=) when specified whether the repository is
        to include (+), exclude (-) or replace (=) ie all existing repositories will be
        discarded and replaced with the given list of repositories.
      This list will be used as well as a boot repository list.

 ```sh --yes | -y | --force```
      disables interactive mode and assumes ```kw yes``` for all questions

 ```sh --no | -n```
      disables interactive mode and assumes ```kw no``` for all questions

 ```sh --ask```
      enables interactive mode

 ```sh --error```
      exit with error whenever interactive mode is required

###) NUTS OPEN OPTIONS:

 ```sh --recover  or -z```
      try to recover from invalid workspace by ignoring cache and re-resolving dependencies. User configuration will not be altered.
      Will bootstrap a new workspace unless ```sh -K``` (```sh --skip-companions```) option is armed.

 ```sh --reset  or -Z```
      reset (delete) ```sh nuts``` workspace folder before starting the workspace. All user configuration will not be deleted.

 ```sh --dry  or -D```
      perform a dry execution (with no side effects) rather than an effective one. prints actions or external command lines to
      perform if the ```sh --dry``` was not armed. Useful to know more about command effects.

 ```sh --skip-welcome  or -K```
      do not call welcome command if the command line is empty. This is helpful in conjunction with ```sh --reset``` not
      to start a new workspace (and recreate config files) after resetting the configuration folders.

 ```sh --embedded  or -b```
      when invoking a nuts artifact, it will be executed in the current process (no JVM process wil be spawn)

 ```sh --external  or --spawn or -x```
      when invoking a nuts artifact, it will always be executed in a newly created process (this is the default)

 ```sh --user-cmd```
      the command is considered as a native command (not a nuts) and will be passed to the os as is.

 ```sh --root-cmd```
      the command is considered as a native command (not a nuts) and will be passed to the os as is with root privileges (a password will be asked for).

 ```sh --open-mode  <mode>```
      defines open mode of the workspace. three values are accepted :
      ```kw open-or-create``` or ```kw RW``` or ```kw ON``` or ```kw OC``` :
                    this is the default, if the workspace exists, it will be opened ;
                    if it is not it will be created then opened.
      ```kw open-existing``` or ```kw R```   or ```kw O``` :
                    will open existing workspace of fail
      ```kw create-new``` or ```kw W``` or ```kw C``` or ```kw N``` :
                    will create non existing workspace of fail

 ```sh --open```
      will open existing workspace of fail

 ```sh --create```
      will create non existing workspace of fail

##) NUTS COMMAND:
```sh nuts``` handles a set of command to manage nuts it sel and to run/exec other programs, mainly those its was responsible
for installing. Commands support include internal commands, supported packages (installed or not, when not installed
will search for it), aliases (a commodity mechanism to extend internal commands) and even any other executable.
 Here is a lis of internal commands :

 ```sh version  [<-options>]...
 or --version or -version or -v```
      show version and exit.
      for more details, type : ```sh nuts``` help version

 ```sh info  [<-options>]...```
      show workspace detailed information (paths and libraries) and exit.
      for more details, type : ```sh nuts``` help info

 ```sh welcome  [<-options>]...```
      show welcome message and exit.
      for more details, type : ```sh nuts``` help welcome

 ```sh help  [<-options>]... <nuts-artifact>...```
 or ```sh --help or -? or -h```
      show this help and exit
      for more details, type : ```sh nuts``` help help

 ```sh license [<-options>]...```
      show license info and exit
      for more details, type : ```sh nuts``` help info

 ```sh install [<-options>]... <nuts-artifact>... <args> ...```
      install ```sh nuts``` package <nuts-artifact>
      for more details, type : ```sh nuts``` help install

 ```sh uninstall [<-options>]... <nuts-artifact>... <args> ...```
      uninstall  ```sh nuts``` package <nuts-artifact>
      for more details, type : ```sh nuts``` help uninstall

 ```sh update [<-options>]... <ids> ...  <args> ...```
      check if a newer version of ```sh nuts``` or any of the provided <ids>
      is available in the current workspace and perform update by downloading (fetch)
      and installing the artifact. The updated version is promoted to 'default' version.
      for more details, type : ```sh nuts``` help update

 ```sh check-updates} [<-options>]... <ids> ...```
      check if a newer version of ```sh nuts``` is available in the current workspace without performing updates
      Takes the same arguments and options as ```sh update``` command
      for more details, type : ```sh nuts``` help check-updates

 ```sh search [<-options>]... <ids> ...```
      search for <ids>
      for more details, type : ```sh nuts``` help search

 ```sh fetch [<-options>]... <ids> ...```
      download <ids>  without installing them
      for more details, type : ```sh nuts``` help fetch

 ```sh deploy [<-options>]... <id> ...```
      deploy <ids>  without installing them
      for more details, type : ```sh nuts``` help deploy

 ```sh undeploy [<-options>]... <id> ...```
      undeploy <ids>
      for more details, type : ```sh nuts``` help undeploy

 ```sh exec [<-options>]... [command] <args>...```
 ```sh --exec [<-options>]... [command] <args>...```
 ```sh -e [<-options>]... [command] <args>...```
      run command with the given executor options ( it will be considered an option if it
      starts with ```sh -``` ). This is helpful to issue JVM Options to executor for instance.
      for more details, type : ```sh nuts``` help exec

 ```sh which [<-options>]... [command] ...```
      show command to be executed if run with 'exec'
      for more details, type : ```sh nuts``` help which

 ```sh --reset [<-options>]...```
       reset (delete) ```sh nuts``` workspace folder. Will bootstrap a new workspace unless ```sh -K```
       (```sh --skip-welcome```) option is armed.
       Actually this is a special command that is available only at boot time.
       Available command options are :
       ```sh -y``` : to skip confirmation

 ```sh - <args>...```
   run a nuts shell (nsh) command with the remaining arguments

#!include</net/thevpc/nuts/runtime/includes/standard-options-format.ntf>

##) EXAMPLES:
```sh nuts help```
            shows this help and exit

```sh nuts --workspace /home/me/some-folder --archetype=minimal ```
            A minimal (####minimal#### archetype) workspace will be created
            and saved if no workspace was resolved. The workspace handles local
            packages only

```sh nuts --workspace /home/me/some-folder  update ```
            updates ```sh nuts``` to the very latest version using workspace location
            /home/me/some-folder.

```sh
        nuts --workspace /home/me/some-folder  --yes -e -Xmx1G netbeans-launcher
```
            run netbeans-launcher with JVM option ```sh -Xmx1G```. If the artifact is not installed
            it will be automatically installed ( ```sh --yes``` modifier helps disabling interactive mode)
