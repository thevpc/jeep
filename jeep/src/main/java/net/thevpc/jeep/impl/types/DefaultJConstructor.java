package net.thevpc.jeep.impl.types;

import net.thevpc.jeep.*;
import net.thevpc.jeep.impl.functions.JSignature;
import net.thevpc.jeep.util.JTypeUtils;
import net.thevpc.jeep.*;
import net.thevpc.jeep.core.types.DefaultJObject;
import net.thevpc.jeep.core.DefaultJTypedValue;

import java.lang.reflect.Constructor;

public class DefaultJConstructor extends AbstractJConstructor implements JRawConstructor {
    private JInvoke handler;
    private JType declaringType;
    private JSignature signature;
    private JSignature genericSignature;
    private String[] argNames;
    private JAnnotationInstanceList annotations=new DefaultJAnnotationInstanceList();
    private JModifierList modifiers=new DefaultJModifierList();
    private boolean autoGenerated;
    private String sourceName;
    private Constructor hostConstructor;

    public DefaultJConstructor() {
    }

    public Constructor getHostConstructor() {
        return hostConstructor;
    }

    public DefaultJConstructor setHostConstructor(Constructor hostConstructor) {
        this.hostConstructor = hostConstructor;
        return this;
    }

    @Override
    public JTypes getTypes() {
        return getDeclaringType().getTypes();
    }

    public DefaultJConstructor setArgNames(String[] argNames) {
        this.argNames = argNames;
        return this;
    }

    public JAnnotationInstanceList getAnnotations() {
        return annotations;
    }

    @Override
    public JType[] getArgTypes() {
        return signature==null?null:signature.argTypes();
    }

    @Override
    public String[] getArgNames() {
        return argNames;
    }

    public DefaultJConstructor setGenericSignature(JSignature signature) {
        this.genericSignature = signature;
        this.signature=JSignature.of(genericSignature.name(),
                JTypeUtils.buildRawType(genericSignature.argTypes(),this),genericSignature.isVarArgs());
        return this;
    }

    @Override
    public JSignature getGenericSignature() {
        return genericSignature;
    }
    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public void setAutoGenerated(boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }

    @Override
    public JSignature getSignature() {
        return signature;
    }

    public JModifierList getModifiers() {
        return modifiers;
    }

    public JInvoke getHandler() {
        return handler;
    }

    public DefaultJConstructor setHandler(JInvoke handler) {
        this.handler = handler;
        return this;
    }

    public JType getDeclaringType() {
        return declaringType;
    }

    public DefaultJConstructor setDeclaringType(JType declaringType) {
        this.declaringType = declaringType;
        return this;
    }

//    public DefaultJConstructor setSignature(JSignature signature) {
//        this.signature = signature;
//        return this;
//    }

    @Override
    public Object invoke(JInvokeContext context) {
        DefaultJObject newInstance=new DefaultJObject(declaringType);
        context=context.builder()
                .setInstance(new DefaultJTypedValue(newInstance,declaringType))
                .setName(declaringType.getName())
                .build();
        Object invokeResult = handler.invoke(context);
        return newInstance;
    }

    @Override
    public JType getReturnType() {
        return getDeclaringType();
    }

    @Override
    public String getName() {
        return declaringType.getName();
    }

    @Override
    public JDeclaration getDeclaration() {
        return getDeclaringType();
    }

    @Override
    public JTypeVariable[] getTypeParameters() {
        return new JTypeVariable[0];
    }

    @Override
    public String getSourceName() {
        return sourceName;
    }

    public DefaultJConstructor setSourceName(String sourceName) {
        this.sourceName = sourceName;
        return this;
    }

    public void addModifiers(JModifier... jModifiers) {
        DefaultJModifierList mm = (DefaultJModifierList) modifiers;
        mm.addAll(jModifiers);
    }
    public void addAnnotation(JAnnotationInstance jAnnotationInstance){
        ((DefaultJAnnotationInstanceList)annotations).add(jAnnotationInstance);
    }
}
